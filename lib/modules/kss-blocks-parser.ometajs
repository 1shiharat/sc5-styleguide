ometa kssBlocksParser {

  lineBreak = seq('\n'),
  lineEnd = lineBreak | end,

  inlineCommentPrefix = seq('//'),
  lineWithNoComments = (~inlineCommentPrefix char)* lineEnd, // every line with no inline comments

  // A set of numbers divided with "."
  kssReferenceNumber_ = '.' digit+ kssReferenceNumber_*,
  kssReferenceNumber = digit+ kssReferenceNumber_*,

  // In-comment string mentioning styleguide reference
  kssReferenceString = seq(' ')* seq('Styleguide ') kssReferenceNumber seq(' ')*,

  // A block of inline comments
  inlineComment = inlineCommentPrefix (~lineEnd ~kssReferenceString char)*,

  multiLineCommentPrefix = seq('/*'),
  multiLineCommentSuffix = seq('*/'),

  // A block of multiline comments
  multiLineCommentBody = (~multiLineCommentSuffix char)*,
  multiLineComment = (multiLineCommentPrefix multiLineCommentBody multiLineCommentSuffix):c -> [#comment, c],

  // A block of inline comments with KSS markup
  kssLastString = inlineCommentPrefix kssReferenceString lineEnd,
  kssMarkupInline = ((~lineWithNoComments inlineComment lineEnd)* kssLastString):k -> [#kss, k],

  // A block of multiline comments with KSS markup
  kssLastStringMultiline = kssReferenceString lineEnd?,
  kssMarkupMultiLineBody = (~multiLineCommentSuffix ~kssLastStringMultiline char)* kssLastStringMultiline,
  kssMarkupMultiLine = (multiLineCommentPrefix kssMarkupMultiLineBody multiLineCommentSuffix):k -> [#kss, k],

  // KSS markup can be either in any block of comments
  kssMarkup = kssMarkupInline | kssMarkupMultiLine,

  // A code block is anything which is not KSS markup block
  code = (~kssMarkup char)*:c -> [#code, c.join('')],

  // A block consists of KSS markup and following code block
  block = kssMarkup:k lineEnd* code:c -> [#block, k, c],

  any = code? (block)*

}
